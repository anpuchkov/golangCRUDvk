swagger: "2.0"
info:
  description: "API for managing movies"
  version: "1.0.0"
  title: "Movie API"
basePath: "/"
schemes:
  - "http"
paths:
  /movies:
    get:
      summary: "Get all movies"
      tags:
        - "Movies"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Movie"
    post:
      summary: "Add a new movie"
      tags:
        - "Movies"
      parameters:
        - in: "body"
          name: "movie"
          description: "Movie object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/Movie"
      responses:
        201:
          description: "Movie added successfully"
        400:
          description: "Invalid input"
  /movies/update:
    put:
      summary: "Update an existing movie"
      tags:
        - "Movies"
      parameters:
        - in: "body"
          name: "movie"
          description: "Movie object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Movie"
      responses:
        200:
          description: "Movie updated successfully"
        400:
          description: "Invalid input"
  /movies/delete:
    delete:
      summary: "Delete a movie"
      tags:
        - "Movies"
      parameters:
        - in: "query"
          name: "id"
          description: "ID of the movie that needs to be deleted"
          required: true
          type: "integer"
      responses:
        200:
          description: "Movie deleted successfully"
        400:
          description: "Invalid input"
  /movies/search:
    get:
      summary: "Search movies by part of title"
      tags:
        - "Movies"
      parameters:
        - in: "query"
          name: "partOfTitle"
          description: "Part of the title to search for"
          required: true
          type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Movie"
  /movies/sort:
    get:
      summary: "Get movies with sorting"
      tags:
        - "Movies"
      parameters:
        - in: "query"
          name: "sortType"
          description: "Type of sorting (date, title, rating)"
          required: false
          type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Movie"

definitions:
  Movie:
    type: "object"
    properties:
      id:
        type: "integer"
      title:
        type: "string"
      description:
        type: "string"
      release_date:
        type: "string"
        format: "date"
      rating:
        type: "number"
        format: "float"
    required:
      - "id"
      - "title"
      - "description"
      - "release_date"
      - "rating"